

### Механизм блокировок
Цель:

*понимать как работает механизм блокировок объектов и строк*

- Настройте сервер так, чтобы в журнал сообщений сбрасывалась информация о блокировках, удерживаемых более 200 миллисекунд. Воспроизведите ситуацию, при которой в журнале появятся такие сообщения.
параметр 
log_lock_waits

postgres=# alter system set log_lock_waits = 'on';
ALTER SYSTEM
postgres=# alter system set deadlock_timeout = '200ms';
ALTER SYSTEM
postgres=# select pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

- Смоделируйте ситуацию обновления одной и той же строки тремя командами UPDATE в разных сеансах. Изучите возникшие блокировки в представлении pg_locks и убедитесь, что все они понятны. Пришлите список блокировок и объясните, что значит каждая.
postgres=# create database locks;
CREATE DATABASE
postgres=# \c locks 
psql (14.0 (Ubuntu 14.0-1.pgdg20.04+1), server 13.4 (Ubuntu 13.4-4.pgdg20.04+1))
You are now connected to database "locks" as user "postgres".
locks=# create table t1 (a integer, b varchar null);
CREATE TABLE

locks=# insert into t1 values(1,'aaaaaaaaaaaaaaaaa');
insert into t1 values(2,'bbbbbbbbbbbbbbbbb');
insert into t1 values(3,'ccccccccccccccccc');
INSERT 0 1
INSERT 0 1
INSERT 0 1


откроем одну сессию, и заблокируем все записи:
locks=# begin;
BEGIN
locks=*# update t1 set b = b || b;
UPDATE 3
locks=*# 

и откроем во второй сессии транзакцию и попробуем обновить одну из записей.
locks=*# update t1 set a = 4 where a = 3;

посмотрим в лог /var/log/postgresql/postgresql-13-main.log:  

2021-10-31 15:47:20.874 EET [156244] postgres@locks LOG:  process 156244 still waiting for ShareLock on transaction 505 after 200.078 ms
2021-10-31 15:47:20.874 EET [156244] postgres@locks DETAIL:  Process holding the lock: 156268. Wait queue: 156244.
2021-10-31 15:47:20.874 EET [156244] postgres@locks CONTEXT:  while updating tuple (0,3) in relation "t1"
2021-10-31 15:47:20.874 EET [156244] postgres@locks STATEMENT:  update t1 set a = 4 where a = 3;

прерву апдейт из второй транзакции, а также закоммитим первый.
ERROR:  canceling statement due to user request
CONTEXT:  while updating tuple (0,3) in relation "t1"


- Воспроизведите взаимоблокировку трех транзакций. Можно ли разобраться в ситуации постфактум, изучая журнал сообщений?

сделаю три файла-сценария:

c1.sql:
begin;
update t1 set b = 'locked by 1' where a = 1;
select pg_sleep(10);
update t1 set b = 'locked by 1' where a = 2;
commit;

c2.sql:
begin;
update t1 set b = 'locked by 2' where a = 2;
select pg_sleep(10);
update t1 set b = 'locked by 2' where a = 3;
commit;

c3.sql:
begin;
update t1 set b = 'locked by 3' where a = 3;
select pg_sleep(10);
update t1 set b = 'locked by 3' where a = 1;
commit;

c.sh:
psql -d locks -f c1.sql -L c1.log& 
sleep 1 ; 
psql -d locks -f c2.sql -L c2.log& 
sleep 1 ; 
psql -d locks -f c3.sql -L c3.log& 


запустим эту конструкцию:
postgres@heaven:~$ ./c.sh 
BEGIN
UPDATE 1
BEGIN
UPDATE 1
BEGIN
UPDATE 1
 pg_sleep 
----------
 
(1 row)

 pg_sleep 
----------
 
(1 row)

 pg_sleep 
----------
 
(1 row)

psql:c3.sql:4: ERROR:  deadlock detected
DETAIL:  Process 156533 waits for ShareLock on transaction 507; blocked by process 156524.
Process 156524 waits for ShareLock on transaction 508; blocked by process 156527.
Process 156527 waits for ShareLock on transaction 509; blocked by process 156533.
HINT:  See server log for query details.
CONTEXT:  while updating tuple (0,4) in relation "t1"
UPDATE 1
ROLLBACK
COMMIT
UPDATE 1
COMMIT

в это-же время в логе были сообщения:

2021-10-31 15:58:52.952 EET [156524] postgres@locks LOG:  process 156524 still waiting for ShareLock on transaction 508 after 200.152 ms
2021-10-31 15:58:52.952 EET [156524] postgres@locks DETAIL:  Process holding the lock: 156527. Wait queue: 156524.
2021-10-31 15:58:52.952 EET [156524] postgres@locks CONTEXT:  while updating tuple (0,5) in relation "t1"
2021-10-31 15:58:52.952 EET [156524] postgres@locks STATEMENT:  update t1 set b = 'locked by 1' where a = 2;

2021-10-31 15:58:53.951 EET [156527] postgres@locks LOG:  process 156527 still waiting for ShareLock on transaction 509 after 200.085 ms
2021-10-31 15:58:53.951 EET [156527] postgres@locks DETAIL:  Process holding the lock: 156533. Wait queue: 156527.
2021-10-31 15:58:53.951 EET [156527] postgres@locks CONTEXT:  while updating tuple (0,6) in relation "t1"
2021-10-31 15:58:53.951 EET [156527] postgres@locks STATEMENT:  update t1 set b = 'locked by 2' where a = 3;

2021-10-31 15:58:54.960 EET [156533] postgres@locks LOG:  process 156533 detected deadlock while waiting for ShareLock on transaction 507 after 200.128 ms
2021-10-31 15:58:54.960 EET [156533] postgres@locks DETAIL:  Process holding the lock: 156524. Wait queue: .
2021-10-31 15:58:54.960 EET [156533] postgres@locks CONTEXT:  while updating tuple (0,4) in relation "t1"
2021-10-31 15:58:54.960 EET [156533] postgres@locks STATEMENT:  update t1 set b = 'locked by 3' where a = 1;
2021-10-31 15:58:54.960 EET [156533] postgres@locks ERROR:  deadlock detected
2021-10-31 15:58:54.960 EET [156533] postgres@locks DETAIL:  Process 156533 waits for ShareLock on transaction 507; blocked by process 156524.
        Process 156524 waits for ShareLock on transaction 508; blocked by process 156527.
        Process 156527 waits for ShareLock on transaction 509; blocked by process 156533.
        Process 156533: update t1 set b = 'locked by 3' where a = 1;
        Process 156524: update t1 set b = 'locked by 1' where a = 2;
        Process 156527: update t1 set b = 'locked by 2' where a = 3;
2021-10-31 15:58:54.960 EET [156533] postgres@locks HINT:  See server log for query details.
2021-10-31 15:58:54.960 EET [156533] postgres@locks CONTEXT:  while updating tuple (0,4) in relation "t1"
2021-10-31 15:58:54.960 EET [156533] postgres@locks STATEMENT:  update t1 set b = 'locked by 3' where a = 1;
2021-10-31 15:58:54.961 EET [156527] postgres@locks LOG:  process 156527 acquired ShareLock on transaction 509 after 1209.750 ms
2021-10-31 15:58:54.961 EET [156527] postgres@locks CONTEXT:  while updating tuple (0,6) in relation "t1"
2021-10-31 15:58:54.961 EET [156527] postgres@locks STATEMENT:  update t1 set b = 'locked by 2' where a = 3;
2021-10-31 15:58:54.968 EET [156524] postgres@locks LOG:  process 156524 acquired ShareLock on transaction 508 after 2216.791 ms
2021-10-31 15:58:54.968 EET [156524] postgres@locks CONTEXT:  while updating tuple (0,5) in relation "t1"
2021-10-31 15:58:54.968 EET [156524] postgres@locks STATEMENT:  update t1 set b = 'locked by 1' where a = 2;


Цепочка блокировок:  процесс 156533 ждет ->  156524 -> 156527 -> 156533 который является также стартовым в цепочке.

В дополнение есть информация какой процесс какую команду выполнял, и какую строку ожидал.

Отстреленным является Process 156533: update t1 set b = 'locked by 3' where a = 1;



- Могут ли две транзакции, выполняющие единственную команду UPDATE одной и той же таблицы (без where), заблокировать друг друга?

я думаю нет, т.к. должна произойти эскалация блокировки на таблицу и тогда объект блокировки будет единственный и его нельзя дать заблокировать одновременно двум процессам.

- Попробуйте воспроизвести такую ситуацию.





 Version and Platform Compatibility / Other Platforms and Clients
 Resource Usage / Cost-Based Vacuum Delay
 Autovacuum
 Query Tuning / Planner Method Configuration
 Query Tuning / Other Planner Options
 Client Connection Defaults / Statement Behavior
 File Locations
 Write-Ahead Log / Settings
 Process Title
 Client Connection Defaults / Shared Library Preloading
 Replication
 Replication / Subscribers
 Client Connection Defaults / Locale and Formatting
 Reporting and Logging / What to Log
 Write-Ahead Log / Checkpoints
 Replication / Master Server
 Reporting and Logging / When to Log
 Resource Usage / Background Writer
 Write-Ahead Log / Recovery Target
 Error Handling
 Resource Usage / Disk
 Query Tuning / Genetic Query Optimizer
 Preset Options
 Statistics / Monitoring
 Resource Usage / Kernel Resources
 Lock Management
 Statistics / Query and Index Statistics Collector
 Resource Usage / Asynchronous Behavior
 Resource Usage / Memory
 Replication / Sending Servers
 Version and Platform Compatibility / Previous PostgreSQL Versions
 Write-Ahead Log / Archive Recovery
 Developer Options
 Write-Ahead Log / Archiving
 Connections and Authentication / Authentication
 Replication / Standby Servers
 Connections and Authentication / SSL
 Client Connection Defaults / Other Defaults
 Query Tuning / Planner Cost Constants
 Connections and Authentication / Connection Settings
 Reporting and Logging / Where to Log

 
 
               name                |            setting             |      context      |                                                               short_desc                                                                
-----------------------------------+--------------------------------+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------
 application_name                  | psql                           | user              | Sets the application name to be reported in statistics and logs.
 debug_pretty_print                | on                             | user              | Indents parse and plan tree displays.
 debug_print_parse                 | off                            | user              | Logs each query's parse tree.
 debug_print_plan                  | off                            | user              | Logs each query's execution plan.
 debug_print_rewritten             | off                            | user              | Logs each query's rewritten parse tree.
 event_source                      | PostgreSQL                     | postmaster        | Sets the application name used to identify PostgreSQL messages in the event log.
 log_autovacuum_min_duration       | 0                              | sighup            | Sets the minimum execution time above which autovacuum actions will be logged.
 log_checkpoints                   | off                            | sighup            | Logs each checkpoint.
 log_connections                   | off                            | superuser-backend | Logs each successful connection.
 log_destination                   | stderr                         | sighup            | Sets the destination for server log output.
 log_directory                     | log                            | sighup            | Sets the destination directory for log files.
 log_disconnections                | off                            | superuser-backend | Logs end of a session, including duration.
 log_duration                      | off                            | superuser         | Logs the duration of each completed SQL statement.
 log_error_verbosity               | default                        | superuser         | Sets the verbosity of logged messages.
 log_file_mode                     | 0600                           | sighup            | Sets the file permissions for log files.
 log_filename                      | postgresql-%Y-%m-%d_%H%M%S.log | sighup            | Sets the file name pattern for log files.
 log_hostname                      | off                            | sighup            | Logs the host name in the connection logs.
 log_line_prefix                   | %m [%p] %q%u@%d                | sighup            | Controls information prefixed to each log line.
 log_lock_waits                    | off                            | superuser         | Logs long lock waits.
 log_min_duration_sample           | -1                             | superuser         | Sets the minimum execution time above which a sample of statements will be logged. Sampling is determined by log_statement_sample_rate.
 log_min_duration_statement        | -1                             | superuser         | Sets the minimum execution time above which all statements will be logged.
 log_min_error_statement           | error                          | superuser         | Causes all statements generating error at or above this level to be logged.
 log_min_messages                  | warning                        | superuser         | Sets the message levels that are logged.
 log_parameter_max_length          | -1                             | superuser         | When logging statements, limit logged parameter values to first N bytes.
 log_parameter_max_length_on_error | 0                              | user              | When reporting an error, limit logged parameter values to first N bytes.
 log_replication_commands          | off                            | superuser         | Logs each replication command.
 log_rotation_age                  | 1440                           | sighup            | Automatic log file rotation will occur after N minutes.
 log_rotation_size                 | 10240                          | sighup            | Automatic log file rotation will occur after N kilobytes.
 log_statement                     | none                           | superuser         | Sets the type of statements logged.
 log_statement_sample_rate         | 1                              | superuser         | Fraction of statements exceeding log_min_duration_sample to be logged.
 log_temp_files                    | -1                             | superuser         | Log the use of temporary files larger than this number of kilobytes.
 log_timezone                      | Europe/Kiev                    | sighup            | Sets the time zone to use in log messages.
 log_transaction_sample_rate       | 0                              | superuser         | Set the fraction of transactions to log for new transactions.
 log_truncate_on_rotation          | off                            | sighup            | Truncate existing log files of same name during log rotation.
 logging_collector                 | off                            | postmaster        | Start a subprocess to capture stderr output and/or csvlogs into log files.
 syslog_facility                   | local0                         | sighup            | Sets the syslog "facility" to be used when syslog enabled.
 syslog_ident                      | postgres                       | sighup            | Sets the program name used to identify PostgreSQL messages in syslog.
 syslog_sequence_numbers           | on                             | sighup            | Add sequence number to syslog messages to avoid duplicate suppression.
 syslog_split_messages             | on                             | sighup            | Split messages sent to syslog by lines and to fit into 1024 bytes.
(39 rows)


log_lock_waits                    | off                            | superuser         | Logs long lock waits.
